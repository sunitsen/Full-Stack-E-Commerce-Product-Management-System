Project Summary: E-Commerce Product Management System
Technologies Used:

    Node.js: Backend server runtime environment.

    Express.js: Framework for building RESTful APIs with Node.js.

    MongoDB: NoSQL database for storing product and user data.

    Mongoose: ODM (Object Data Modeling) library to interact with MongoDB.

    JWT (JSON Web Token): For user authentication and authorization.

    dotenv: To manage environment variables for secret keys and database credentials.

    bcryptjs: For hashing and comparing user passwords securely.

Packages Used:

    express: Web framework for building RESTful APIs.

    mongoose: ODM for MongoDB.

    jsonwebtoken (JWT): To generate and verify JWT tokens.

    bcryptjs: For password hashing and comparison.

    dotenv: To store environment variables securely.

Operations and Endpoints:

    User Operations:

        POST /user/register: Register a new user by providing email and password. The password is hashed before saving to the database.

        POST /user/login: Log in the user by verifying the provided email and password. If valid, a JWT token is generated and returned for authentication.

    Product Operations (CRUD):

        GET /products: Fetch all products with optional sorting, pagination, and filtering (by category, price range).

        POST /products: Add a new product to the database with name, price, category, stock, and description.

        GET /user/products/:id: Fetch a single product by its ID.

        PUT /user/products/:id: Update a product's details using its ID.

        DELETE /user/products/:id: Delete a product from the database using its ID.

Secure Routes and Authentication:

    JWT Authentication:

        For user login, a JWT token is generated after successful authentication.

        The token is included in subsequent API requests via the Authorization header.

        A middleware function (authMiddleware) verifies the token on protected routes (e.g., updating or deleting a product).

    Authorization Middleware:

        Protects routes such as POST, PUT, and DELETE for product management. These routes require a valid JWT token to be passed in the request headers.

        If the user is not authenticated or the token is invalid, access to these routes is denied.

Secure Route Example (JWT Middleware):

const jwt = require('jsonwebtoken');
const { User } = require('../model/user');

// Middleware for verifying JWT token
const authenticateToken = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];  // Get token from header

    if (!token) return res.status(401).json({ message: "Access denied. No token provided." });

    try {
        const decoded = jwt.verify(token, process.env.SECRET_KEY);  // Verify the token
        req.user = decoded;  // Attach the decoded token to the request object
        next();  // Proceed to the next middleware or route handler
    } catch (err) {
        return res.status(400).json({ message: "Invalid token." });
    }
};

This middleware is used in protected routes like:

app.put('/products/:id', authenticateToken, async (req, res) => {
    // Only accessible if the user is authenticated
});

Password Security (bcryptjs):

    Hashing Passwords: During user registration, the password is hashed using bcryptjs before saving to the database to ensure that passwords are not stored in plain text.

const bcrypt = require('bcryptjs');
const salt = await bcrypt.genSalt(10);
const hashedPassword = await bcrypt.hash(password, salt);

    Comparing Passwords: During login, the provided password is compared with the stored hashed password using bcryptjs.

const isMatch = await bcrypt.compare(password, user.password);

Conclusion:

This project implements a full-fledged E-Commerce backend with secure user authentication and management of products using the following core technologies:

    Node.js and Express for building REST APIs.

    MongoDB and Mongoose for storing and querying product and user data.

    JWT and bcryptjs for secure user authentication and password management.

    Middleware to ensure route security with JWT token validation.

The system supports basic CRUD operations for products, along with secure login and registration mechanisms for users.